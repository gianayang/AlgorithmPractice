Class CycliSort{
    
    public static void sort(int[] arr){
        int i = 0;
        while (i < arr.length) {
            int tmp = arr[i] - 1;
            if(arr[i] != arr[j]){
                swap(arr, i, j);
            }
            else{
                i++;
            }
        }
    }

//time: O(n) + O(n-1) + O(n)
    public static int findMissingNumber(int[] nums) {
        // TODO: Write your code here
        int i = 0;
        while(i < nums.length){
            if(nums[i] < nums.length && nums[i] != nums[nums[i]]){
                swap(nums, i, nums[i]);
            }
            else{
                i++;
            }
        }
        for(int j = 0; j < nums.length; j++){
            if(nums[j] != j){
                return j;
            }
        }
        return -1;
    }

    public static List<Integer> findNumbers(int[] nums) {
        List<Integer> missingNumbers = new ArrayList<>();
        // TODO: Write your code here
        int i = 0;
        while(i < nums.length){
            if (nums[i] != nums[nums[i] - 1])
                swap(nums, i, nums[i] - 1);
            else
                i++;
        }
        for(int j = 0; j < nums.length; j++){
            if(nums[j] != j + 1){
                missingNumbers.add(j + 1);
            }
        }
        return missingNumbers;
    }


/*
We are given an unsorted array containing ‘n+1’ numbers taken from the range 1 to ‘n’. 
The array has only one duplicate but it can be repeated multiple times. Find that duplicate number without using any extra space. 
*/

     public static int findNumber(int[] nums) {
    // TODO: Write your code here
        int i = 0;
        while(i < nums.length){
            if(nums[i] != i + 1){
                if(nums[i] != nums[nums[i] - 1]){
                    swap(nums,i,nums[i] - 1);
                }
                else{
                    return nums[i];
                }
            }
            else{
                i++;
            }
        }
        return -1;
    }

/*
Find the Corrupt Pair (easy)
We are given an unsorted array containing ‘n’ numbers taken from the range 1 to ‘n’. The array originally
contained all the numbers from 1 to ‘n’, but due to a data error, one of the numbers got duplicated 
which also resulted in one number going missing. Find both these numbers.
*/
    public static int[] findNumbers(int[] nums) {
        // TODO: Write your code here
        int missing = -1;
        int dupblicates = -1;
        int i = 0;
        while (i <nums.length){
          if(nums[i] != i + 1){
                    if(nums[i] != nums[nums[i] - 1]){
                        int tmp = nums[i];
                        nums[i] = nums[tmp - 1];
                        nums[tmp - 1] = tmp;
                    }
                    else{
                        dupblicates = nums[i];
                        missing = i + 1;
                        i++;
                    }
                }
                else{
                    i++;
                }
        }
        return new int[] { dupblicates, missing};
    }


    private static void swap(int[]arr, int left, int right){
        int tmp = arr[left];
        arr[right] = arr[left];
        arr[left] = tmp;
    }



}
